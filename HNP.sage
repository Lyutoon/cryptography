from Crypto.Util.number import *
from hashlib import sha256
from Crypto.PublicKey import DSA

# HNP: A_ix + B_i = C_i mod p where we just know A_i and (C_i - B_i)'s MSB over mod p
#      And the target is: solve for x

def Babai_closest_vector(L, w):
    '''
    A method to solve apprCVP.
    INPUT:
    * "L" -- a matrix representing the LLL-reduced basis (v1, ..., vn) of a lattice.
    * "w" -- a target vector to approach to.
    OUTPUT:
    * "v" -- a approximate closest vector.
    '''
    G, _ = L.gram_schmidt()
    t = w
    i = L.nrows() - 1
    while i >= 0:
        w -= round( (w*G[i]) / G[i].norm()^2 ) * L[i]
        i -= 1
    return t - w

def CVP_solver(As, Bs, kbits, ps):
    '''
    https://www.isg.rhul.ac.uk/~sdg/igor-slides.pdf
    Solve for HNP using CVP method.
    Return the revover result from the given data.
    Input: 
    * As: (Ax+B)'s A
    * Bs: (Ax+B)'s B
    * kbits: C's approximate bit number
    * ps: mods
    '''
    d = len(As)
    M = Matrix(ZZ, d+1, d+1)
    for i in range(d):
        M[-1, i] = As[i]
    M[-1, d] = 1
    for i in range(d):
        M[i, i] = ps[i]
    M = M.LLL()

    target_vec = [2^kbits - Bs[i] for i in range(d)]
    target_vec.append(2^kbits)

    Target = vector(target_vec)
    res = Babai_closest_vector(M, Target)
    
    x = res[d]
    print(x)
    return x

def SVP_solver(As, Bs, kbits, ps):
    '''
    Solve for HNP using SVP method.
    Return the recover reslut from the given data.
    Construct lattice:
        p1
           p2
              ...
                  pn
        A1 A2 ... An  1
        B1 B2 ... Bn    2^kbits
    Input: 
    * As: (Ax+B)'s A
    * Bs: (Ax+B)'s B
    * kbits: C's approximate bit number
    * ps: mods
    '''
    d = len(As)
    M = Matrix(ZZ, d+2, d+2)
    for i in range(d):
        M[i, i] = ps[i]
        M[-2, i] = As[i]
        M[-1, i] = Bs[i]
    M[-2, -2] = 1
    M[-1, -1] = 2^kbits

    V = M.LLL()[0]
    x = V[-2]
    print(x)
    return x

def generate_testcase():
    '''
    Just taken from N1CTF2020 baby_proof
    '''
    x = b'flag{test}'
    x = bytes_to_long(x)
    key = DSA.generate(int(1024))  # It takes time to generate, plz be patient...
    p, q, g = key.domain()
    y = pow(g, x, p)
 
    v = getRandomRange(1, x)
    t = pow(g, v, p)
 
    gyt = b"".join(
        map(
            lambda x: int.to_bytes(len(str(x)), 4, 'big') + str(x).encode(),
            (g, y, t)
        ))
    c = int.from_bytes(sha256(gyt).digest(), 'big')
    r = (v - c*x) % q
    return g, y, p, q, t, r

if __name__ == '__main__':
    # As = []
    # Bs = []
    # ps = []
    # kbits = 335
    # for i in range(50):
    #     g, y, p, q, t, r = generate_testcase()
    #     gyt = b"".join(
    #         map(
    #             lambda x: int.to_bytes(len(str(x)), 4, 'big') + str(x).encode(),
    #             (g, y, t)
    #         ))
    #     c = int.from_bytes(sha256(gyt).digest(), 'big')
    #     As.append(c)
    #     Bs.append(r)
    #     ps.append(q)
    As = [90727976738909756907017147655284889200804353948617144584308881813335609445480, 95949951255932254866741926967370169493681169747464744860059410799380740616732, 58014508940950045841970963158749281961020588321410823289542027534009755974657, 3638538652335342141209987495727610918811142837500815840786586216893364349878, 43539491956798637317236251950457866006255782661807368303165500784994214778934, 9564361084404917642283649413003511261566136782359370298581273915052397319704, 54275214496775535575773812147887895889442867518142020840679123520033013898382, 69255791934338660313069396308829858801151984945480130074457483614395181289111, 105470112309938248325470550546650629749395508340671856607349666818697930316025, 67997671922622549468491813546168425195058358928994513860106010823758449923703, 87389513446251321882813647228774434848686092643183972555139234378494104583280, 78027389611067762339282869347579060854442486954602300812249830696171986435997, 72951046277093787635137001300051796279184504699029185063008911706540934501802, 23438060729907934196459930963304635988439749907711517852020918292996509933713, 25655758534873900555186230495783282913730480257950728658528922118034018482213, 98896863034220311528341727652807992760940169409277573989054636748096475730585, 5831493956361697082725306550854467285774350483450726789751445080727609102466, 112909967507610375149797392348216736645601140467361577744288874806760756517010, 4115408879613418054042845178616800995728300898977462187649912542566629282293, 32747739441593442267810185263810937410529860632132933224328072598731190669775, 105015694659440207943707838455006051525379198463243039147973484234426361533498, 79407460618144918656355444368124837648364618904816460250943709605633006420385, 85006722410159275235976259190292298599711802337248305536219324421361063728758, 50391664289499674367395077135092455432453897148841024244005096457866949086862, 100111261539976204428817828673213174202404876311561797056807433165567940912488, 82932223964623736704449876483252286045600236459089144268697109134402656147164, 49748648715557661020530404369373925888384230651475904798216818594875888988588, 33602078812919512903092979401040947636609765196958687765170847323596670622900, 31938139709215819354811977293007892316842665189103896904117619817427726315386, 68481106825787979681478725671410440700006060975242341152373605768721490905360, 62284859909209361060603716124463888914768982689864367651217975715467664043657, 4244394507344587289356540021660253440083295516344053704496543833660189946296, 77301533622820052251169291276914665711577790663677577105511401208498743558907, 22397096454523566336858197535196036597780066780453906159452388165800776710574, 54275467547339051756386968352508499612063802663919079079943637559684570224271, 12385418596795580945015871728598890243145061805431505879736901091720777516700, 54493580532816029158355282302497776717332569050559014882881965913089527908315, 48310533757334309433819239810637795567328151885318620311393826138243410695493, 68673419444182828086468940957273896268867487932983494397042912162925704918551, 66304249767360623537547011100573206503960510926442349927956023475062568616688, 87364386541125583253364769989898103605041610529746465606012359772546951222410, 77692878600150465076200979980541766376849826638658962707361389390473404573963, 89415404861572134477608019422622462008138254341440330351465725625777613818470, 20922073113055153553116780998787281289365731319215863188988441797444207340265, 103120693766094044752689337857797479582140930578028421995383255005244425908650, 5621398644387058033397586059787865862500733009444395867177327140912478694773, 43149730177717159599347430480764796780094280581562708304141912419620250809113, 21423885149306982152426462987158190709684024025817449015678588011017050148686, 15785079585127693364135273569017293781365659396848404140119196131185327225303, 73759644234006680794100318296348200036821072368517798302955490628997985213945, 76118866712629800989032617462165480884653665585507043841577775336749487579384, 106565367985643723132239703378113421934768387341972538405086713307134796996463, 22482050379775554866026845551037640896405888252915754190619502917477735275003, 80184418099483079698268438178410800841944756104427946177527811181444749324375, 103623655029382462974526427121426356817592169763853150055041602520077366665522, 32452426604370640412878921692218170419327334549039489918884052182707555984976, 115226904196446981739866291977822337924208654982408423203820118090344029903881, 6882951451494224798200213773581135693472895606815282594969278739003289449334, 27321724807887264886492460520329395587755089784243852455146759221660805317001, 114376800570348309960645486978117805431023188928638014047979653923399708870657]
    Bs = [428945724633905613137853961830302860065051243074, 1220930154059535722341388318913602048422598942887, 33352213614920162293701528474661243788890435943, 402943552660318618356595852245174232168532772479, 613439326847130181673364152520150585423916929565, 724327724544269459171971305650590951011629934240, 778727461274205853311465497253045701344033602190, 618388042806241091331112864525259953422476104847, 873520190615486065331859550460616036237473249012, 537320243337313623473169010551506963959457526217, 780043252931607553063382348993838299615036226325, 901089108159819100220524386256739913874896713158, 769693573779627318107674792246651578293710636776, 348431557698212801547856923819825969563251305822, 408580728440989004220347656098775006897157939517, 426399013658267220359869714652386379582206067464, 464683593864944051544440943912345567971334767948, 72522737238810326273347502217035241189750118526, 84093497688251055379026012257968555910441622345, 919215466690160556585713460517059232084987420343, 991495951767177967431660810387863938520081158573, 367049727286343649142061202680337085267299463065, 73636815865553889996516704676915491125630710369, 356943355965715392223495970127188906879836636608, 383016827961445714061071276405610687488071705843, 231437452829297909706793649939552528378844993389, 157988121823339521125114332250555914456547665478, 1191061136288860486763278098362321852882924381643, 347970146849157790934702235217318669627159128318, 777315285573409764863012652736605629987523989531, 253921927100899345860037833205994481681700964406, 165378866778266532846545462554538779395172944878, 418258180421126666078226757255628048237416857360, 525542799131062468467610988720036847305817721607, 508673774405154948479901484275638807745272547279, 140042809989007647947554789605389926104516511278, 331964322392034125727237567667791333115469324828, 193731354689393487849096599713449515590008812940, 953513009044574005529881550094176435872929990613, 476287074529496266430904912990874445417449192453, 891168442559510204497483082921553905585464028304, 1140354589468148950570362451221677984073175592352, 136057768876273556870773258878851720227769567914, 215556266367733454901155433292345089279698750084, 72587134886566185904597317724999036330062686784, 774412457353783481318825974680332227427502826654, 502929191582031809468634554061996658386143703528, 13821790796152197918751048485673438335902180683, 458247988123973568922848019812377272857112520475, 472201605700724300536751215759279019797385124020, 197671353674804854545775445508046851540989289041, 1147838184671747370061308755345657467595089139041, 1019104895866166532120704588115468049217970762985, 670151554415766658521885944775469834827107037180, 257782813506260079113089061744819120127632028257, 764406685893972534996548673948552826688285951087, 18638163975181185795007582345078962143600363662, 638212032040477764260294147839910036580879873544, 374112187219219090026922991489372075355078883631, 186471603398334757143220204376991940810327945454]
    ps = [1343112908824306852054599807794461469208734293693, 1347917319478425248990832005556416068364192636429, 1104486341916113806495016856967303651948219068539, 1061260648332446226630423302134995559484300505563, 1451117357989284302581794074064733739268240021011, 1269173417981837008033990201142918194731222186767, 1279500296340351426458309477379461188116079045213, 821964180776729330195548230692624978067367807691, 898750096350767524797483849434658004259218318153, 1218238169982613956085504110976078593527180041577, 1267730703807147054038304606450196858123916920033, 1174355552323950748253973932852953008420964208221, 923496639843208150841142910325773386040659520153, 1121171968605030923484600018756082894403212368497, 1152283606848495571313572818655305712619912402461, 1073298717801066023839892129076465759412024251839, 853215233373145623288588424310411536874563631941, 940943209101769170408057634422788313346762793987, 780815171559595671737466636211717922120355416903, 1412225967954490359563308013020020045934297102801, 1112381495905139315493621214520420958216392943667, 971060542201140958037806677251661059601327372629, 1429233801088883590777309673868096226224328170389, 911690368203843534994273988590636551588162574433, 1414971300097599016929458287477613460661913944981, 973594138954423894501475605530231392058186544429, 1220050077520231114846061192864746485857881251971, 1219573266404100331926163440469680903005273016533, 890650956580289409050488593214029724005073727143, 1354518694920098893811891245350672461644586514349, 1216807192557825057217150819920964543516669347863, 1247224662488951472088945617254189499213267241537, 1369013841002894273360477904731733958771345110029, 754485747684689044507104898914448863643239552179, 917190654604210464081490489832490506367844913909, 1055061238344851344270445819861473696492385293877, 1166434864072673040723814739965833589951858473181, 854714609186328893551822225288449650429770201561, 1048530618108449464497453808568375551903484771233, 986669792072208355980156954971098795819773072179, 958154238422682438898355706228379294790430623219, 1378253873167989907961062646849250900972118045489, 1423025838454636010504007375933062376198058509959, 824404859021069478798910298819843614183481724919, 1170545225326729254379612507170512029773552813001, 903632378164164154117777174201913916772834101827, 1196290054474880402699639449339433103540830782369, 1005270553064618723975019356506017341523710624899, 936303121093064802579185536838373558717410125697, 946062529572351770049127552211373179308802329579, 977997631782120779589869312610846752235029289031, 1372127685919295053222096997006854457457445463077, 1450786883570686177383352273983735707695900496329, 880865912751890366317822090112472075159990540497, 1147000719747677677590460690968506133435603793841, 1012866550497812920218656965845622483097503695533, 1046675729847637570136732053961284013888644311949, 1255089934428324635331615207753422635386070031843, 886462263068255269830696854921502430916078074981, 1412064120661685645024172924748195241255493581629]
    x = 483680648326948572066941
    kbits = x.nbits()
    print(long_to_bytes(CVP_solver(As, Bs, kbits - 1, ps)))
    print(long_to_bytes(SVP_solver(As, Bs, kbits + 1, ps)))